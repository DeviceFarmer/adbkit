const https = require('https');
const fs = require('fs');
const path = require('path');

const repo_path = '/aosp-mirror/platform_frameworks_base/master';
const original = {
  hostname: 'raw.githubusercontent.com',
  path: repo_path + '/core/java/android/view/KeyEvent.java',
  method: 'GET',
};
const regex = /public static final int (KEYCODE_[^\s]+)\s*=\s*([0-9]+);/g;
const file = path.resolve(__dirname, '../lib/adb/keycode.ts');

const req = https.request(original, function (res) {
  if (res.statusCode !== 200) {
    console.warn('Unable to retrieve KeyEvent.java (HTTP ' + res.statusCode + ')');
    return;
  }
  let raw = Buffer.from('');
  res.on('data', (chunk) => {
    return (raw = Buffer.concat([raw, chunk]));
  });
  return res.on('end', () => {
    let match;
    const code = raw.toString();
    const date = new Date().toUTCString();
    const coffee = [];
    coffee.push('// Generated by `npm run keycode` on ' + date);
    coffee.push('// KeyEvent.java Copyright (C) 2006 The Android Open Source Project');
    coffee.push('');
    coffee.push('export = {');
    while ((match = regex.exec(code))) {
      coffee.push(`\t${match[1]}: ${match[2]},`);
    }
    coffee.push('};\n');
    fs.writeFileSync(file, coffee.join('\n'));
    console.log('File ' + file + ' created');
  });
});
req.on('error', (e) => {
  console.error(e.message);
});
return req.end();
